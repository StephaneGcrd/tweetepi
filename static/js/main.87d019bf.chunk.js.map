{"version":3,"sources":["logo.svg","components/navbar.js","components/graphs/Timeseries.js","components/graphs/FeedMaladie.js","components/graphs/topwords.js","components/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","navbar","props","react_default","a","createElement","className","Timeseries","Date","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","label","color","data","dataGrippe","dataAngine","dataMalGorge","dataRhume","dataToux","sortData","bind","assertThisInitialized","that","axios","get","then","response","console","log","dataG","dataA","dataMG","dataR","dataT","map","obj","push","x","date","y","Grippe","Angine","Mal_Gorge","Rhume","Toux","setState","catch","error","_this2","id","title","es","xType","width","height","style","strokeWidth","onSeriesMouseOver","event","onSeriesMouseOut","background","Component","FeedMaladie","feed","mapTweets","i","key","s","word","charAt","toUpperCase","slice","moment","datetime","startOf","fromNow","Topwords","array","pop","angle","subLabel","_id","showLabels","colorType","dashboard","Timeseries_Timeseries","FeedMaladie_FeedMaladie","topwords_Topwords","App","components_navbar","components_dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87d019bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst navbar = props => {\n  return (\n    <nav className=\"z-depth-0 transparent\">\n        Dashboard - Tweets & Ã‰pidemies\n        \n    </nav>\n    \n  )\n}\n\nnavbar.propTypes = {\n\n}\n\nexport default navbar\n","import React, { Component } from 'react'\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineSeries, LabelSeries } from 'react-vis';\nimport axios from 'axios'\n\n\n\n\nconst data_grippe = [\n    { x: new Date(\"02-01-2018\"), y: 4},\n    { x: new Date(\"02/02/2018\"), y: 4.5 },\n    {x: new Date(\"02/04/2018\"), y: 5.5}\n]\n\nconst data_angine = [\n    { x: new Date(\"02/01/2018\"), y: 1 },\n    { x: new Date(\"02/02/2018\"), y: 1.5 },\n    {x: new Date(\"02/05/2018\"), y: 2}\n\n]\n\n\n\n\n\n\n\nexport default class Timeseries extends Component {\n    constructor(props) {\n    super(props)\n\n        this.state = {\n            label: ' ',\n            color: '#FFFFFF',\n            data: [],\n            dataGrippe: [],\n            dataAngine: [],\n            dataMalGorge: [],\n            dataRhume: [],\n            dataToux: []\n        }\n\n        this.sortData = this.sortData.bind(this);\n    }\n\n    componentDidMount() {\n        var that = this;\n        axios.get('http://51.38.48.44:1234/all_reduce')\n          .then(function (response) {\n              console.log(response.data)\n              var dataG = []\n              var dataA = []\n              var dataMG = []\n              var dataR = []\n              var dataT = []\n              response.data.map(obj =>\n                  dataG.push({ x: new Date(obj.date), y: obj.Grippe })\n              );\n              response.data.map(obj =>\n                dataA.push({ x: new Date(obj.date), y: obj.Angine })\n              );\n              response.data.map(obj =>\n                dataMG.push({ x: new Date(obj.date), y: obj.Mal_Gorge })\n              );\n              response.data.map(obj =>\n                dataR.push({ x: new Date(obj.date), y: obj.Rhume })\n              );\n              response.data.map(obj =>\n                dataT.push({ x: new Date(obj.date), y: obj.Toux })\n              );\n\n              that.setState({\n                  dataGrippe: dataG,\n                  dataAngine: dataA,\n                  dataMalGorge: dataMG,\n                  dataRhume: dataR,\n                  dataToux: dataT\n              });\n        \n            })\n          .catch(function (error) {\n            console.log(error);\n          });\n    }\n    \n\n    sortData() {\n        var array1 = [1, 4, 9, 16];\n\n        // pass a function to map\n        \n    }\n\n\n\n    render() {\n        return (\n            <div className=\"col s12\">\n            <div id=\"graphique\" className=\"card-panel white z-depth-4\">\n                    <div className=\"card-title\">{this.props.title}</div>\n            <div className=\"plotwrap\">\n                <XYPlot\n                xType=\"time\"\n                width={1000}\n                height={400}>\n                \n                            <XAxis/>\n                    <YAxis />\n\n                    <LineSeries\n                            data={this.state.dataGrippe}\n                            color=\"#b71c1c\"\n                        style={{ strokeWidth: 4 }}\n                            onSeriesMouseOver={\n                                (event) => {\n                                    this.setState({\n                                        label: 'Grippe',\n                                        color: '#b71c1c'\n                                    })\n                               \n                                }}\n                            onSeriesMouseOut={\n                                (event) => {\n                                    this.setState({\n                                        label: '',\n                                        color: '#FFFFFF'\n                                    })\n                                   \n                            }\n                        }\n\n                        />\n\n\n                            \n                        <LineSeries\n                            data={this.state.dataToux}\n                            color=\"#3949ab\"\n                        style={{ strokeWidth: 4 }}\n                            onSeriesMouseOver={\n                                (event) => {\n                                    this.setState({\n                                        label: 'Toux',\n                                        color: \"#3949ab\"\n                                    })\n                               \n                                }}\n                            onSeriesMouseOut={\n                                (event) => {\n                                    this.setState({\n                                        label: '',\n                                        color: '#FFFFFF'\n                                    })\n                                   \n                            }\n                        }\n\n                        />\n                            \n                        <LineSeries\n                            data={this.state.dataAngine}\n                            color=\"#7b1fa2\"\n                        style={{ strokeWidth: 4 }}\n                            onSeriesMouseOver={\n                                (event) => {\n                                    this.setState({\n                                        label: 'Angine',\n                                        color: '#7b1fa2'\n                                    })\n                               \n                                }}\n                            onSeriesMouseOut={\n                                (event) => {\n                                    this.setState({\n                                        label: '',\n                                        color: '#FFFFFF'\n                                    })\n                                   \n                            }\n                        }\n\n                            />\n                            \n                            <LineSeries\n                            data={this.state.dataMalGorge}\n                            color=\"#00acc1 \"\n                        style={{ strokeWidth: 4 }}\n                            onSeriesMouseOver={\n                                (event) => {\n                                    this.setState({\n                                        label: 'Mal de gorge',\n                                        color: '#00acc1 '\n                                    })\n                               \n                                }}\n                            onSeriesMouseOut={\n                                (event) => {\n                                    this.setState({\n                                        label: '',\n                                        color: '#FFFFFF'\n                                    })\n                                   \n                            }\n                        }\n\n                            />\n                            \n                            <LineSeries\n                            data={this.state.dataRhume}\n                            color= \"#1e88e5\"\n                        style={{ strokeWidth: 4 }}\n                            onSeriesMouseOver={\n                                (event) => {\n                                    this.setState({\n                                        label: 'Rhume',\n                                        color: '#1e88e5'\n                                    })\n                               \n                                }}\n                            onSeriesMouseOut={\n                                (event) => {\n                                    this.setState({\n                                        label: '',\n                                        color: '#FFFFFF'\n                                    })\n                                   \n                            }\n                        }\n\n                        />\n                </XYPlot>\n                </div>\n                    <div className=\"labelgraph\" style={{ background: this.state.color }}>{this.state.label}</div>\n                \n            </div>\n            \n        </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport moment from 'moment'\n\nconst capitalize = (s) => {\n    if (typeof s !== 'string') return ''\n    return s.charAt(0).toUpperCase() + s.slice(1)\n  }\n\nexport default class FeedMaladie extends Component {\n    constructor(props) {\n      super(props)\n    \n      this.state = {\n         feed:  []\n      }\n        this.mapTweets = this.mapTweets.bind(this)\n    }\n\n    componentDidMount() {\n        var that = this;\n        axios.get('http://51.38.48.44:1234/last_words')\n          .then(function (response) {\n              console.log(response.data)\n              that.setState({\n                  feed: response.data\n              })\n            })\n          .catch(function (error) {\n            console.log(error);\n          });\n    }\n\n    mapTweets() {\n\n    }\n    \n  render() {\n    return (\n        <div className=\"col s5\">\n            <div className=\"card-panel white tweetwrap\">\n                <div className=\"card-title\">Feed tweets</div>\n                <div className=\"card-content\">\n                \n                    {        this.state.feed.map( (obj,i) => {\n            return(\n                <div key={i}>\n                    <p>Tweet Ã  propos de<span className=\"wordfeed\"> {capitalize(obj.word)}</span>  <span className=\"datefeed\">{moment(obj.datetime).startOf().fromNow()}</span> </p>\n                </div>\n        );\n        })}\n                </div>\n                \n            \n            </div>\n        </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport moment from 'moment'\nimport {RadialChart} from 'react-vis';\n\nconst capitalize = (s) => {\n    if (typeof s !== 'string') return ''\n    return s.charAt(0).toUpperCase() + s.slice(1)\n  }\n\nexport default class Topwords extends Component {\n    constructor(props) {\n      super(props)\n    \n      this.state = {\n         data:  []\n      }\n        this.mapTweets = this.mapTweets.bind(this)\n    }\n\n    componentDidMount() {\n        var that = this;\n        axios.get('http://51.38.48.44:1234/all_reduce')\n          .then(function (response) {\n              var array = response.data.pop()\n              var array2 = []\n\n              console.log(array.Grippe)\n              that.setState({\n                  data: [{\n                        angle: array.Grippe,\n                      label: 'Grippe',\n                      subLabel: array.Grippe,\n                      color: \"#ff8a80\"\n                        },\n                      {\n                          angle: array.Angine,\n                          label: 'Angine',\n                          subLabel: array.Angine,\n                          color: \"#ffeb3b\"\n                          \n                      },\n                      {\n                          angle: array.Toux,\n                          label: 'Toux',\n                          subLabel: array.Toux,\n                          color: \"#eeff41\"\n                      },\n                      {\n                          angle: array.Mal_Gorge,\n                          label: 'Mal de gorge',\n                          subLabel: array.Mal_Gorge,\n                          color: \"#ffd54f\"\n                      },\n                      {\n                          angle: array.Rhume,\n                          label: \"Rhume\",\n                          subLabel:array.Rhume,\n                          color: \"#e0f2f1 \"\n                      }\n                  ]\n              })\n              console.log(that.state.data)\n              delete that.state.data._id;\n              delete that.state.data.date;\n\n        \n            })\n          .catch(function (error) {\n            console.log(error);\n          });\n    }\n\n    mapTweets() {\n\n    }\n    \n  render() {\n    return (\n        <div className=\"col s7\">\n            <div className=\"card-panel white piewrap\">\n                <div className=\"card-title\">Tweets du jour</div>\n                <div className=\"piechartwrap\">\n                <RadialChart\n                        data={this.state.data}\n                        className= \"testlabel\"\n                        showLabels={true}\n                        colorType=\"literal\"\n                        \n  width={330}\n  height={330} />\n                </div>\n\n\n\n            \n            </div>\n        </div>\n    )\n  }\n}\n","import React from 'react'\nimport Timeserie from './graphs/Timeseries'\nimport FeedMaladie from './graphs/FeedMaladie'\nimport Topwords from './graphs/topwords'\n\nconst dashboard = () => {\n  return (\n    <div className=\"container Dashboardstyle\">\n    \n          <div className=\"row\">\n        <Timeserie title=\"Graphique d'occurence des mots suivant la date\" />\n        <FeedMaladie />\n        <Topwords />\n          \n          </div>    \n          \n    </div>\n  )\n}\n\nexport default dashboard\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/navbar.js'\nimport Dashboard from './components/dashboard.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <Dashboard />\n      </div>\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}